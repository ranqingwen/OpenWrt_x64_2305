#===============================================
# Description: OpenWrt_2305_x64
# Lisence: MIT
# By：ranqw
#===============================================

name: OpenWrt_x64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      checkupdates66:
        description: '启动OpenWrt编译'
        required: true
        default: 'true'
# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  schedule:
    - cron: 0 4 * * 4

#分钟字段：0 表示在分钟为UTC时间为0的时候执行，既整点。
#小时字段：4 表示在小时为UTC时间为4的时候执行。北京时间+8，既12点。
#日期字段：* 日期，表示在每月的第几天执行。
#月份字段：* 表示月份，即 1 到 12 月都会匹配。
#星期字段：4 表示匹配周几，如果指定了日期情况下，星期的设置在将不起实际作用。此时为每周4。

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/lede.feeds.conf.default
  CONFIG_FILE: config/lede_config/2305_x64.config
  CONFIGS: config/lede_config
  DIY_P1_SH: diy_script/lede_diy/x86/2305_x64_diy-part1.sh
  DIY_P2_SH: diy_script/lede_diy/x86/2305_x64_diy-part2.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  UPLOAD_CONFIG: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TELEGRAM_WORK_PUSH: false
  WECHAT_WORK_PUSH: false
  TZ: Asia/Shanghai
  FILE_NAME: OpenWrt
  PRODUCT_NAME: x86_64

jobs:
  CheckRepo:
    runs-on: ubuntu-22.04
    env:
      REPO_URL_Lede: https://github.com/coolsnowwolf/lede
      REPO_BRANCH_Lede: master
      REPO_PATH_Lede : "2305_x64"
    outputs:
      output: ${{ steps.outputunifreq.outputs.unifreq }}
    steps:
    - name: 获取哈希值
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_Lede -b $REPO_BRANCH_Lede $REPO_PATH_Lede
        cd $REPO_PATH_Lede
        echo "commitHash_2305_x64=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        cd

    - name: 显示提交头部和组合头部
      id: combHeader
      run: |
        echo "commitHash_2305_x64: ${{ steps.getHash.outputs.commitHash_2305_x64 }}"

    - name: 比较提交哈希值
      id: cacheHash
      uses: actions/cache@main
      with:
        path: .commitHash_2305_x64
        key: HEAD-${{ steps.getHash.outputs.commitHash_2305_x64 }}

    - name: 为下一个任务设置输出
      id: outputunifreq
      if: steps.cacheHash.outputs.cache-hit == 'true'
      run: |
        echo "unifreq=hello" >> $GITHUB_OUTPUT

    - name: 保存新提交哈希值
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash_2305_x64 }} | tee .commitHash_2305_x64
# /////////////////////////////////////////////////////////////////////////////////////////////////////////
  Build_2305_x64:
    needs: [CheckRepo]
    if: ${{ needs.CheckRepo.outputs.output != 'hello' || github.event.inputs.checkupdates66 == 'true'}}
    runs-on: ubuntu-22.04

    steps:
    - name: 检验
      uses: actions/checkout@main

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673 \n"
        echo -e "-------------- ------------CPU信息------------------------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "CPU线程数量: $(nproc)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo "硬盘详情："
        echo "系统空间        类型   总数  已用  可用  使用率"
        df -Th

    - name: 密匙检测（密匙为空则退出）
      run: |
        cd ${GITHUB_WORKSPACE}
        if [[ -z "${{ secrets.GH_TOKEN }}" ]]; then
          echo "您没有设置仓库密匙，请按教程设置好密匙再来"
          echo "REPO_TOKEN密匙制作教程：https://git.io/jm.md"
          exit 1
        fi
    - name: 释放Ubuntu磁盘空间
      uses: endersonmenezes/free-disk-space@v2
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
        remove_packages_one_command: true
        remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
        testing: false

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E snap set system refresh.retain=2
        sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update
        sudo -E apt-get -y install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install libfuse-dev clang
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "$TZ"
        df -Th

    - name: 创建卷组和逻辑卷
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner

    - name: 挂载逻辑卷
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        df -Th

    - name: 克隆源代码
      working-directory: /builder
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Author=$(git show -s --date=short --format="%an")
        Date=$(git show -s --date=short --format="%ci")
        Commit=$(git show -s --date=short --format="%s")
        Hash=$(git show -s --date=short --format="%H")
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV

    - name: 加载自定义源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新插件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装插件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义设置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $GITHUB_WORKSPACE/diy_script/*.sh
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/diy_script/preset-clash-core.sh $CLASH_KERNEL
        $GITHUB_WORKSPACE/diy_script/preset-openwrt.sh $CLASH_KERNEL
        
        sed -i 's/CONFIG_LINUX.*/CONFIG_LINUX_6_6=y/g' .config
        
        sed -i 's/KERNEL_PATCHVER:=*.*/KERNEL_PATCHVER:=6.6/g' target/linux/x86/Makefile
        
        #sed -i 's/KERNEL_TESTING_PATCHVER:=*.*/KERNEL_TESTING_PATCHVER:=6.6/g' target/linux/x86/Makefile

    - name: 编译信息
      run: |
        cd openwrt
        echo "系统空间        类型  总数  已用  可用  使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in
        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="
        echo
        echo
        echo "输出完整插件信息..."
        echo
        echo
        cat .config

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      run: |
        echo "=========================================="
        echo "----------------空间使用-------------------"
        echo "=========================================="
        echo "系统空间       类型   总数  已用  可用 使用率"
        df -hT
        echo "=========================================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin

    - name: 编辑固件文件
      id: organizer
      run: |
        mkdir -p ./artifact/buildinfo
        cp -rf openwrt/.config ./artifact/buildinfo/x86.config
        cp -rf $(find openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.FILE_NAME }}-${{ env.KERNEL }}_bin-${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 上传配置
      uses: actions/upload-artifact@main
      if: env.UPLOAD_CONFIG == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.FILE_NAME }}.config
        path: ./artifact/buildinfo/

    - name: 重命名文件
      run: |
        cd openwrt
        bash  rename.sh
        Kernel=`grep "_uefi.img.gz" wget/open_dev_md5 | cut -d - -f 2 | cut -d _ -f 2 `
        echo "KERNEL=$Kernel" >> $GITHUB_ENV

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        mv *bios.img.gz ${{ env.FILE_NAME }}${{ env.FILE_DATE }}-bios.img.gz
        mv *uefi.img.gz ${{ env.FILE_NAME }}${{ env.FILE_DATE }}-uefi.img.gz
        mv openwrt_bios.md5 ${{ env.FILE_NAME }}${{ env.FILE_DATE }}-bios.md5
        mv openwrt_uefi.md5 ${{ env.FILE_NAME }}${{ env.FILE_DATE }}-uefi.md5
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传到firmware
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: ${{ env.FILE_NAME }}-${{ env.KERNEL }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布到release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.FILE_NAME }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GH_TOKEN }}
        body: |
          ### 📒 固件信息
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 💻 平台架构: ${{ env.PRODUCT_NAME }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址：192.168.23.250
          - 🔑 默认密码：空
          - 🔴 固件大小：Kernel=32M，rootfs=968M
          - 🌻 固件源码: ${{ env.REPO_URL }}
          - 🧊 更新时间：${{ env.date }}
          - 🎈 源码哈希值：${{ env.hash }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 完成时间 
      run: |
        echo "END=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        end=$(date +%s)
        seconds=$(( end - start ))
        hour=$(( $seconds/3600 ))
        min=$(( ($seconds-${hour}*3600)/60 ))
        sec=$(( $seconds-${hour}*3600-${min}*60 ))
        HMS=`echo ${hour}:${min}:${sec}`
        echo "time=$HMS" >> $GITHUB_ENV

    - name: Telegram通知
      if: steps.compile.outputs.status == 'success' && env.TELEGRAM_WORK_PUSH == 'true'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ♨️ 【${{ env.FILE_NAME }}】项目编译完成 ♨️
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 💻 平台架构: ${{ env.PRODUCT_NAME }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.23.250
          - 🔑 默认密码: 空
          - 🔴 固件大小: Kernel=32M，rootfs=968M
          - 🌻 固件源码: ${{ env.REPO_URL }}
          - 🧊 更新时间: ${{ env.date }}
          - 🎈 源码哈希值: ${{ env.hash }}
          https://github.com/ranqingwen/OpenWrt_x64_2305/releases/tag/${{ env.FILE_NAME }}

    - name: 企业微信通知
      if: env.WECHAT_WORK_PUSH == 'true'
      run: |
        curl -X POST "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WEBHOOK_SEND_KEY }}" \
        -H "Content-Type: application/json" \
        -d '{
            "msgtype": "news",
            "news": {
              "articles": [
                {
                  "title": "♨️ 【${{ env.FILE_NAME }}】项目编译完成 ♨️",
                  "description": "- ❀  固件名称：${{ env.FILE_NAME }}-${{ env.KERNEL }}\n
                    - 🚀 内核版本: ${{ env.KERNEL }}\n
                    - 💻 平台架构: ${{ env.PRODUCT_NAME }}\n
                    - 💝 源码分支: ${{ env.REPO_BRANCH }}\n
                    - 🌐 默认地址: 192.168.23.250\n
                    - 🔴 固件大小: Kernel=32M，rootfs=968M\n
                    - 🌻 固件源码: ${{ env.REPO_URL }}\n
                    - 🧊 更新时间: ${{env.release}}",
                  "url": "https://github.com/ranqingwen/OpenWrt_x64_2305/releases/tag/${{ env.FILE_NAME }}"
                }
              ]
            }
          }'
